# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]

jobs:
  publish-contracts:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      PROJECT_NAME: Database.UnitOfWork.Contracts
      PROJECT_PATH: ${{PROJECT_NAME}}/${{PROJECT_NAME}}.csproj
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Build
      run: dotnet build $PROJECT_PATH --configuration Release
    - name: Create package
      run: dotnet pack $PROJECT_PATH --output $RELEASES_DIR --configuration Release
    - name: Push package
      run: dotnet nuget push "*.nupkg" --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json --skip-duplicate
  publish-entityframework:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      PROJECT_NAME: Database.UnitOfWork.EF
      PROJECT_PATH: $PROJECT_NAME/$PROJECT_NAME.csproj
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Build
      run: dotnet build $PROJECT_PATH --configuration Release
    - name: Create package
      run: dotnet pack $PROJECT_PATH --output $RELEASES_DIR --configuration Release
    - name: Push package
      run: dotnet nuget push "*.nupkg" --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json --skip-duplicate
  publish-entityframework-dependencyinjection:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      PROJECT_NAME: Database.UnitOfWork.EF.DI
      PROJECT_PATH: $PROJECT_NAME/$PROJECT_NAME.csproj
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Build
      run: dotnet build $PROJECT_PATH --configuration Release
    - name: Create package
      run: dotnet pack $PROJECT_PATH --output $RELEASES_DIR --configuration Release
    - name: Push package
      run: dotnet nuget push "*.nupkg" --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json --skip-duplicate
  publish-dapper:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      PROJECT_NAME: Database.UnitOfWork.Dapper
      PROJECT_PATH: $PROJECT_NAME/$PROJECT_NAME.csproj
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Build
      run: dotnet build $PROJECT_PATH --configuration Release
    - name: Create package
      run: dotnet pack $PROJECT_PATH --output $RELEASES_DIR --configuration Release
    - name: Push package
      run: dotnet nuget push "*.nupkg" --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json --skip-duplicate
  publish-dapper-dependencyinjection:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      PROJECT_NAME: Database.UnitOfWork.Dapper.DI
      PROJECT_PATH: $PROJECT_NAME/$PROJECT_NAME.csproj
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Build
      run: dotnet build $PROJECT_PATH --configuration Release
    - name: Create package
      run: dotnet pack $PROJECT_PATH --output $RELEASES_DIR --configuration Release
    - name: Push package
      run: dotnet nuget push "*.nupkg" --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json --skip-duplicate
